import java.util.ArrayList;

/**
 * A class to hold details of audio files.
 * 
 * @author David J. Barnes and Michael Kölling
 * @version 2011.07.31
 */
public class MusicOrganizer
{
    // An ArrayList for storing the file names of music files.
    private ArrayList<String> files;
    // A player for the music files.
    private MusicPlayer player;
        
    /**
     * Create a MusicOrganizer
     */
    public MusicOrganizer()
    {
        files = new ArrayList<String>();
        player = new MusicPlayer();
    }
    
    /**
     * Add a file to the collection.
     * @param filename The file to be added.
     */
    public void addFile(String filename)
    {
        files.add(filename);
    }
    
    /**
     * Return the number of files in the collection.
     * @return The number of files in the collection.
     */
    public int getNumberOfFiles()
    {
        return files.size();
    }
    
    /**
     * List a file from the collection.
     * @param index The index of the file to be listed.
     */
    public void listFile(int index)
    {
        if(index >= 0 && index < files.size()) {
            String filename = files.get(index);
            System.out.println(filename);
        }
    }
    
    /**
     * Show a list of all the files in the collection.
     */
    public void listAllFiles()
    {
        for(String filename : files) {
            System.out.println(filename);
        }
    }
    
    /**
     * List the names of files matching the given search string.
     * @param searchString The string to match.
     */
    public void listMatching(String searchString)
    {
        for(String filename : files) {
            if(filename.contains(searchString)) {
                // A match.
                System.out.println(filename);
            }
        }
    }

    /**
     * Find the index of the first file matching the given
     * search string.
     * @param searchString The string to match.
     * @return The index of the first occurrence, or -1 if
     *         no match is found.
     */
    public int findFirst(String searchString)
    {
        int index = 0;
        // Record that we will be searching until a match is found.
        boolean searching = true;
    
        while(searching && index < files.size()) {
            String filename = files.get(index);
            if(filename.contains(searchString)) {
                // A match. We can stop searching.
                searching = false;
            }
            else {
                // Move on.
                index++;
            }
        }
        if(searching) {
            // We didn�t find it.
            return -1;
        }
        else {
            // Return where it was found.
            return index;
        }
    }

    /**
     * ex 4.30 - rewrite find first to include a local variable of arraylist size
     */
    
    public int findFirstEx430(String searchString, int sizeGuess)
    {
        int index = 0;
        int size = sizeGuess;
        // Record that we will be searching until a match is found.
        boolean searching = true;
    
        while(searching && index < sizeGuess) {
            String filename = files.get(index);
            if(filename.contains(searchString)) {
                // A match. We can stop searching.
                searching = false;
            }
            else {
                // Move on.
                index++;
            }
        }
        if(searching) {
            // We didn�t find it.
            return -1;
        }
        else {
            // Return where it was found.
            return index;
        }
    }
    
    /**
     * Remove a file from the collection.
     * @param index The index of the file to be removed.
     */
    public void removeFile(int index)
    {
        if(index >= 0 && index < files.size()) {
            files.remove(index);
        }
    }

    /**
     * Start playing a file in the collection.
     * Use stopPlaying() to stop it playing.
     * @param index The index of the file to be played.
     */
    public void startPlaying(int index)
    {
        String filename = files.get(index);
        player.startPlaying(filename);
    }

    /**
     * Stop the player.
     */
    public void stopPlaying()
    {
        player.stop();
    }
    
     /**
     *  add songs
     */
    public void setUpData()
    {
        addFile("audio/BigBillBroonzy-BabyPleaseDontGo1.mp3");
        addFile("audio/BlindBlake-EarlyMorningBlues.mp3");
        addFile("audio/BlindLemonJefferson-matchBoxBlues.mp3");   
        addFile("audio/BlindLemonJefferson-OneDimeBlues.mp3");   
    }
    
    /**
     * ex 4.30 - while loop to call multiples of 5 between 10 and 95
     */
    
    public void mutliplesOfFive()
    {
        int start = 10;
        int end = 95;
        while (start <= end) {
            System.out.println(start);
            start += 5;
        }
    }
    
    /**
     * ex 4.31 and 4.32 combined - while loop to add from 1 to 10 and print at the end.
     */
    
    public void sum(int a, int b)
    {
        /**
         * ex 4.31
         * 
         * start = 1;
         * end = 10;
         * while (start < end) {
         *     a++;
         * }
         * System.out.println(start);    
         */
        while (a <= b) {
            System.out.println(a);
            a++;
        }
    }
    
    /**
     * https://www.mathsisfun.com/prime-composite-number.html
     * 
     * A Prime Number can be divided evenly only by 1 or itself.
     * And it must be a whole number greater than 1.
     * 
     * It is a Prime Number when it can't be divided evenly by any number
     * (except 1 or itself).
     * 
     * Any whole number greater than 1 is either Prime or Composite
     * 
     * 1 is not Prime and also not Composite.
     * 
     * 
     *  
     * ex 4.33 - prime number finder
     * 
     *  write a method isPrime(int n) that returns  true if the n parameter is a prime number, 
     *  false if not.  to implement, write a while loop that divides n by all numbers between 2 and 
     *  (n - 1) and tests whether the divsion yeilds a whole number.  you can test this using modulo % 
     *  to see whehter the integer division leaves a remainder of 0
     * 
     *  n % 1 == 0 is true for ALL integers
     *  n % n (n being same number both times but != 0) always == 0
     * 
     *  prime numbers only have 2 divisors - 1 and itself
     *  non-primes (composites greater than 1) have at least 3 divisors (or more depending on the number)
     * 
     * 
     *  This is why (n % i == 0) is not prime
     * 
     * 20:39 - CUdyin: how many whole divisors does a prime have?
     * 20:39 - blindcan't.: only 2
     * 20:39 - blindcan't.: 1 and itself
     * 20:39 - CUdyin: yep
     * 20:39 - CUdyin: how many divisors does any integer that is _not_ a prime have _at least_?
     * 20:40 - blindcan't.: well that depends what the number is
     * 20:40 - blindcan't.: so at least 3
     * 20:40 - blindcan't.: ?
     * 20:40 - CUdyin: precisely
     * 20:40 - CUdyin: any integer that isn't prime (and >1 ;) ) is the product of at least 2 primes
     * 20:40 - CUdyin: so 2 prime factors and 1 are its divisors
     * 20:41 - CUdyin: at least, that is
     * 20:41 - CUdyin: so let's assume that a given number n is prime
     * 20:41 - CUdyin: what happens if we find another divisor for n that isn't one of 1 or n itself?
     * 20:42 - blindcan't.: ah
     * 20:42 - blindcan't.: its now a composite number
     * 20:42 - blindcan't.: so not prime
     * 20:42 - CUdyin: precisely
     * 20:43 - CUdyin: and that's what the loop is doing
     * 20:43 - blindcan't.: okay that makes more sense
     * 20:43 - CUdyin: it tries to find another divisor
     * 20:43 - CUdyin: and if that thing divides the 'prime', then n%x == 0 :P
     * 20:44 - CUdyin: so n wasn't a prime to start with
     * 20:44 - CUdyin: and we can return false :)
     * 
     */
    
    public boolean isPrime(int n) 
    {
        int i = 2; //starting at 2 because the exercise wants to divide n by all numbers between 2 and (n - 1)
        /**
         * CUDyin's while comment - technically, ceil(sqrt(n)) as limit would suffice
         * 
         * 9 / 2 = 4 remainder of 1 - (2 x 4 = 8) + 1 = 9)
         * 9 / 3 = 3 remainder of 0 - 3 x 3 = 9
         * 9 / 4 = 2 remainder of 1 - (4 x 2 = 8) + 1 = 9
         * 
         */ 
        while (i < n) { //continue the loop while i is less than n
           
            if (n % i == 0) { //check that the modulo remainder of n and i is equal to 0, if so, execute next block
                System.out.println(n + " isn't prime"); //the number is not prime because 
                return false; //return false if n % i == 0
            }
            i++; //increase i so we can keep going through the loop if false hasn't been returned yet
        }
        System.out.println(n + " is prime");
        return true; //return true if the entire loop has been executed, i is now greater than n and n % 1 never equalled 0
    }
    
    /** the current time (value, which could be for hours or minutes ) has one added to it.
      * The new values is modulod with limit, if value and limit are the same it will equal 0 and that is assigned,
      * If they are not the same, value + 1 will be assigned.
      *  //ex 3.32 - 2015
      * 
      * 
      * if (value == (limit -1)) {
      *   value = 0;
      * }
      * else {
      *     value = (value + 1);
      * }
      *
      * value = (value + 1) % limit; //modulo of the same thing above
      *
      */
}
