#BlueJ class context
comment0.params=
comment0.target=MusicOrganizer()
comment0.text=\n\ Create\ a\ MusicOrganizer\n
comment1.params=filename
comment1.target=void\ addFile(java.lang.String)
comment1.text=\n\ Add\ a\ file\ to\ the\ collection.\n\ @param\ filename\ The\ file\ to\ be\ added.\n
comment10.params=index
comment10.target=void\ startPlaying(int)
comment10.text=\n\ Start\ playing\ a\ file\ in\ the\ collection.\n\ Use\ stopPlaying()\ to\ stop\ it\ playing.\n\ @param\ index\ The\ index\ of\ the\ file\ to\ be\ played.\n
comment11.params=
comment11.target=void\ stopPlaying()
comment11.text=\n\ Stop\ the\ player.\n
comment12.params=
comment12.target=void\ setUpData()
comment12.text=\n\ \ add\ songs\n
comment13.params=
comment13.target=void\ mutliplesOfFive()
comment13.text=\n\ ex\ 4.30\ -\ while\ loop\ to\ call\ multiples\ of\ 5\ between\ 10\ and\ 95\n
comment14.params=a\ b
comment14.target=void\ sum(int,\ int)
comment14.text=\n\ ex\ 4.31\ and\ 4.32\ combined\ -\ while\ loop\ to\ add\ from\ 1\ to\ 10\ and\ print\ at\ the\ end.\n
comment15.params=n
comment15.target=boolean\ isPrime(int)
comment15.text=\ \n\ ex\ 4.33\ -\ prime\ number\ finder\n\ \n\ write\ a\ method\ isPrime(int\ n)\ that\ returns\ \ true\ if\ the\ n\ parameter\ is\ a\ prime\ number,\ \n\ false\ if\ not.\ \ to\ implement,\ write\ a\ while\ loop\ that\ divides\ n\ by\ all\ numbers\ between\ 2\ and\ \n\ (n\ -\ 1)\ and\ tests\ whether\ the\ divsion\ yeilds\ a\ whole\ number.\ \ you\ can\ test\ this\ using\ modulo\ %\ \n\ to\ see\ whehter\ the\ integer\ division\ leaves\ a\ remainder\ of\ 0\n\ \ \n\ https\://www.mathsisfun.com/prime-composite-number.html\n\ \n\ A\ Prime\ Number\ can\ be\ divided\ evenly\ only\ by\ 1\ or\ itself\ (it\ has\ 2\ factors\ only,\ 1\ and\ itself).\n\ Any\ whole\ number\ greater\ than\ 1\ is\ either\ Prime\ or\ Composite,\ \n\ 1\ is\ not\ Prime\ and\ also\ not\ Composite,\ it\ is\ a\ neutral\ number.\n\ \n\ \ n\ %\ 1\ \=\=\ 0\ is\ true\ for\ ALL\ integers\n\ \ n\ %\ n\ (n\ being\ same\ number\ both\ times\ but\ \!\=\ 0)\ always\ \=\=\ 0\n\ \n\ \ prime\ numbers\ only\ have\ 2\ divisors\ (factors)\ -\ 1\ and\ itself\n\ \ composite\ numbers\ have\ at\ least\ 3\ divisors\ (factors),\ they\ can\ have\ more\ depending\ on\ the\ number.\n\ \ \n\ \ example\:\ 12\ is\ composite,\ its\ factors\ are\ 1,12,\ 3,4,\ 6,2\n\ \ because\:\ 1x12\=12,\ 3x4\=12\ and\ 6x2\=12\n\ \n\ \ This\ is\ why\ (n\ %\ i\ \=\=\ 0)\ is\ not\ prime\ -\ 12\ %\ 2\ \=\=\n\ \n\ 20\:39\ -\ CUdyin\:\ how\ many\ whole\ divisors\ does\ a\ prime\ have?\n\ 20\:39\ -\ blindcan't.\:\ only\ 2\ factors,\ 1\ and\ itself\n\ 20\:39\ -\ CUdyin\:\ yep,\ how\ many\ divisors\ does\ any\ integer\ that\ is\ _not_\ a\ prime\ have\ _at\ least_?\n\ 20\:40\ -\ blindcan't.\:\ well\ that\ depends\ what\ the\ number\ is,\ so\ at\ least\ 3?\n\ 20\:40\ -\ CUdyin\:\ precisely,\ any\ integer\ that\ isn't\ prime\ (and\ >1\ ;)\ is\ the\ product\ of\ at\ least\ 2\ primes\n\ 20\:40\ -\ CUdyin\:\ so\ at\ least\ 2\ prime\ factors\ and\ 1\ are\ its\ divisors\n\ 20\:41\ -\ CUdyin\:\ so\ let's\ assume\ that\ a\ given\ number\ n\ is\ prime\n\ 20\:41\ -\ CUdyin\:\ what\ happens\ if\ we\ find\ another\ divisor\ for\ n\ that\ isn't\ one\ of\ 1\ or\ n\ itself?\n\ 20\:42\ -\ blindcan't.\:\ ah,\ its\ now\ a\ composite\ number\ and\ thus\ not\ prime\n\ 20\:42\ -\ CUdyin\:\ precisely,\ and\ that's\ what\ the\ loop\ is\ doing\n\ 20\:43\ -\ CUdyin\:\ it\ tries\ to\ find\ another\ divisor\n\ 20\:43\ -\ CUdyin\:\ and\ if\ that\ thing\ divides\ the\ 'prime',\ then\ n%x\ \=\=\ 0\ \:P\n\ 20\:44\ -\ CUdyin\:\ so\ n\ wasn't\ a\ prime\ to\ start\ with\n\ 20\:44\ -\ CUdyin\:\ and\ we\ can\ return\ false\ \:)\n\ \n
comment16.params=n
comment16.target=boolean\ isPrime2(int)
comment2.params=
comment2.target=int\ getNumberOfFiles()
comment2.text=\n\ Return\ the\ number\ of\ files\ in\ the\ collection.\n\ @return\ The\ number\ of\ files\ in\ the\ collection.\n
comment3.params=index
comment3.target=void\ listFile(int)
comment3.text=\n\ List\ a\ file\ from\ the\ collection.\n\ @param\ index\ The\ index\ of\ the\ file\ to\ be\ listed.\n
comment4.params=
comment4.target=void\ listAllFiles()
comment4.text=\n\ Show\ a\ list\ of\ all\ the\ files\ in\ the\ collection.\n
comment5.params=searchString
comment5.target=void\ listMatching(java.lang.String)
comment5.text=\n\ List\ the\ names\ of\ files\ matching\ the\ given\ search\ string.\n\ @param\ searchString\ The\ string\ to\ match.\n
comment6.params=searchString
comment6.target=int\ findFirst(java.lang.String)
comment6.text=\n\ Find\ the\ index\ of\ the\ first\ file\ matching\ the\ given\n\ search\ string.\n\ @param\ searchString\ The\ string\ to\ match.\n\ @return\ The\ index\ of\ the\ first\ occurrence,\ or\ -1\ if\n\ \ \ \ \ \ \ \ \ no\ match\ is\ found.\n
comment7.params=searchString\ guess
comment7.target=int\ findFirstEx430(java.lang.String,\ int)
comment7.text=\n\ ex\ 4.30\ -\ rewrite\ find\ first\ to\ include\ a\ local\ variable\ of\ arraylist\ size\n
comment8.params=searchString
comment8.target=int\ findFirstCUDyin(java.lang.String)
comment8.text=\n\ rewrite\ with\ CUDyin's\ logic\n
comment9.params=index
comment9.target=void\ removeFile(int)
comment9.text=\n\ Remove\ a\ file\ from\ the\ collection.\n\ @param\ index\ The\ index\ of\ the\ file\ to\ be\ removed.\n
numComments=17
