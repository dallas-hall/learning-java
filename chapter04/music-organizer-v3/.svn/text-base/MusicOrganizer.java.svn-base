import java.util.ArrayList;

/**
 * A class to hold details of audio files.
 * 
 * @author David J. Barnes and Michael KÃ¶lling
 * @version 2011.07.31
 */
public class MusicOrganizer
{
    // An ArrayList for storing the file names of music files.
    private ArrayList<String> files;
    // A player for the music files.
    private MusicPlayer player;
        
    /**
     * Create a MusicOrganizer
     */
    public MusicOrganizer()
    {
        files = new ArrayList<String>();
        player = new MusicPlayer();
    }
    
    /**
     * Add a file to the collection.
     * @param filename The file to be added.
     */
    public void addFile(String filename)
    {
        files.add(filename);
    }
    
    /**
     * Return the number of files in the collection.
     * @return The number of files in the collection.
     */
    public int getNumberOfFiles()
    {
        return files.size();
    }
    
    /**
     * List a file from the collection.
     * @param index The index of the file to be listed.
     */
    public void listFile(int index)
    {
        if(validIndex(index)) {
            String filename = files.get(index);
            System.out.println(filename);
        }
    }
    
    /**
     * Show a list of all the files in the collection.
     */
    public void listAllFiles()
    {
        for(String filename : files) {
            System.out.println(filename);
        }
    }
    
    /**
     * list all files in a while loop
     */
    
    public void listAllFilesWhileLoop()
    {
        int index = 0;
        while (index < files.size()) {
            String filename = files.get(index);
            System.out.println("heres ya fukn song bro :" + filename);
            index++;
        }
    }
    
    /**
     * Remove a file from the collection.
     * @param index The index of the file to be removed.
     */
    public void removeFile(int index)
    {
        if(validIndex(index)) {
            files.remove(index);
        }
    }

    /**
     * Start playing a file in the collection.
     * Use stopPlaying() to stop it playing.
     * @param index The index of the file to be played.
     */
    public void startPlaying(int index)
    {
        if(validIndex(index)) {
            String filename = files.get(index);
            player.startPlaying(filename);
        }
    }

    /**
     * Stop the player.
     */
    public void stopPlaying()
    {
        player.stop();
    }

    /**
     * Play a file in the collection. Only return once playing has finished.
     * @param index The index of the file to be played.
     */
    public void playAndWait(int index)
    {
        if(validIndex(index)) {
            String filename = files.get(index);
            player.playSample(filename);
        }
    }

    /**
     * Determine whether the given index is valid for the collection.
     * Print an error message if it is not.
     * @param index The index to be checked.
     * @return true if the index is valid, false otherwise.
     */
    private boolean validIndex(int index)
    {
        // The return value.
        // Set according to whether the index is valid or not.
        boolean valid;
        
        if(index < 0) {
            System.out.println("Index cannot be negative: " + index);
            valid = false;
        }
        else if(index >= files.size()) {
            System.out.println("Index is too large: " + index);
            valid = false;
        }
        else {
            valid = true;
        }
        return valid;
    }
    
    /**
     * ex 4.25 - for loop - only prints at end of arrarylist search. so if found, prints each time, if nothing found,
     * prints once at the end.
     * 
     */
    public void listMatching(String searchString)
    {
        newLine();
        boolean found = false;
        for (String filename : files) {
            if(filename.contains(searchString)) {
                // a match
                System.out.println(filename);
                found = true;
            }
        }
        if (found != true)
        {
            System.out.println("can't find shit bra");
        }
    }
    
    /**
     * ex 4.25 - for loop - crappy way because it prints everything in the arraylist
     * 
     */
    public void listMatchingCrappyWay(String searchString)
    {
        newLine();
        boolean found;
        for (String filename : files) {
            if(filename.contains(searchString)) {
                // a match
                System.out.println(filename);
                found = true;
            }
            
            if (!filename.contains(searchString)) {
            found = false;
            System.out.println("can't find shit bra");
        }
        }
        
    }
    
    public void newLine()
    {
        System.out.println();
    }
    
     /**
     *  add songs
     */
    public void setUpData()
    {
        addFile("audio/BigBillBroonzy-BabyPleaseDontGo1.mp3");
        addFile("audio/BlindBlake-EarlyMorningBlues.mp3");
        addFile("audio/BlindLemonJefferson-matchBoxBlues.mp3");   
        addFile("audio/BlindLemonJefferson-OneDimeBlues.mp3");   
    }
    
    /**
     * ex 4.27 - play all files matching the search string for a few seconds and move on
     */
    
    public void playAll(String searchString)
    {
        newLine();
        boolean found;
        for (String filename : files) {
            if(filename.contains(searchString)) {
                // a match
                found = true;
                System.out.println("now playing " + filename);
                player.playSample(filename);
                
            }
            else if (!filename.contains(searchString)) {
                found = false;
                System.out.println("can't find shit bra");
            }
        }
    }
    
    
    public void playAllCUDying(String searchString)
    {
        newLine();
        boolean found;
        for (String filename : files) {
            found = filename.contains(searchString);
            if(found) {
                System.out.println("now playing " + filename);
                player.playSample(filename);
            }
            else {
                System.out.println("can't find shit bra");
            }
        }
    }
    
    /**
     * ex 4.30 - while loop to call multiples of 5 between 10 and 95
     */
    
    public void mutliplesOfFive()
    {
        int start = 10;
        int end = 95;
        while (start <= end) {
            System.out.println(start);
            start += 5;
        }
    }
    
    /**
     * ex 4.31 and 4.32 combined - while loop to add from 1 to 10 and print at the end.
     */
    
    public void sum(int a, int b)
    {
        /**
         * ex 4.31
         * 
         * start = 1;
         * end = 10;
         * while (start < end) {
         *     a++;
         * }
         * System.out.println(start);    
         */
        while (a <= b) {
            System.out.println(a);
            a++;
        }
    }
    
    /**
     * https://www.mathsisfun.com/prime-composite-number.html
     * 
     * A Prime Number can be divided evenly only by 1 or itself.
     * And it must be a whole number greater than 1.
     * 
     * It is a Prime Number when it can't be divided evenly by any number
     * (except 1 or itself).
     * 
     * Any whole number greater than 1 is either Prime or Composite
     * 
     * 1 is not Prime and also not Composite.
     * 
     *  
     * ex 4.33 - prime number finder
     * 
     *  write a method isPrime(int n) that returns  true if the n parameter is a prime number, 
     *  false if not.  to implement, write a while loop that divides n by all numbers between 2 and 
     *  (n - 1) and tests whether the divsion yeilds a whole number.  you can test this using modulo % 
     *  to see whehter the integer division leaves a remainder of 0
     * 
     */
    
    //public boolean isPrime(int n) 
    //{
   
    //}

    
    /** the current time (value, which could be for hours or minutes ) has one added to it.
         * The new values is modulod with limit, if value and limit are the same it will equal 0 and that is assigned,
         * If they are not the same, value + 1 will be assigned.
         */
    //ex 3.32 - 2015
    public void incrementHours()
    {
        //my code without modulo
        /** o
         * 
         * if (value == (limit -1)) {
         *   value = 0;
        * }
        * else {
        *     value = (value + 1);
        * }
        */
       //value = (value + 1) % limit;
    }
}
